package flink.examples.sql._07.query._06_joins;

import org.apache.flink.api.common.functions.RichFlatMapFunction;
import org.apache.flink.table.runtime.collector.TableFunctionCollector;

import flink.core.source.JaninoUtils;

public class JaninoCompileTest {

    public static void main(String[] args) throws Exception {
        String s = "import java.util.List;\n"
                + "\n"
                + "public class BatchJoinTableFuncCollector$8 extends org.apache.flink.table.runtime.collector"
                + ".TableFunctionCollector {\n"
                + "\n"
                + "    org.apache.flink.table.data.GenericRowData out = new org.apache.flink.table.data"
                + ".GenericRowData(2);\n"
                + "    org.apache.flink.table.data.utils.JoinedRowData joinedRow$7 = new org.apache.flink.table.data"
                + ".utils.JoinedRowData();\n"
                + "\n"
                + "    public BatchJoinTableFuncCollector$8(Object[] references) throws Exception {\n"
                + "\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public void open(org.apache.flink.configuration.Configuration parameters) throws Exception {\n"
                + "\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public void collect(Object record) throws Exception {\n"
                + "        List<org.apache.flink.table.data.RowData> l = (List<org.apache.flink.table.data.RowData>) "
                + "getInput();\n"
                + "        List<org.apache.flink.table.data.RowData> r = (List<org.apache.flink.table.data.RowData>) "
                + "record;\n"
                + "\n"
                + "        for (int i = 0; i < l.size(); i++) {\n"
                + "\n"
                + "            org.apache.flink.table.data.RowData in1 = (org.apache.flink.table.data.RowData) l.get(i);\n"
                + "            org.apache.flink.table.data.RowData in2 = (org.apache.flink.table.data.RowData) r.get(i);\n"
                + "\n"
                + "            org.apache.flink.table.data.binary.BinaryStringData field$5;\n"
                + "            boolean isNull$5;\n"
                + "            long field$6;\n"
                + "            boolean isNull$6;\n"
                + "            isNull$6 = in2.isNullAt(1);\n"
                + "            field$6 = -1L;\n"
                + "            if (!isNull$6) {\n"
                + "                field$6 = in2.getLong(1);\n"
                + "            }\n"
                + "            isNull$5 = in2.isNullAt(0);\n"
                + "            field$5 = org.apache.flink.table.data.binary.BinaryStringData.EMPTY_UTF8;\n"
                + "            if (!isNull$5) {\n"
                + "                field$5 = ((org.apache.flink.table.data.binary.BinaryStringData) in2.getString(0))"
                + ";\n"
                + "            }\n"
                + "\n"
                + "\n"
                + "\n"
                + "\n"
                + "\n"
                + "\n"
                + "            if (isNull$5) {\n"
                + "                out.setField(0, null);\n"
                + "            } else {\n"
                + "                out.setField(0, field$5);\n"
                + "            }\n"
                + "\n"
                + "\n"
                + "\n"
                + "            if (isNull$6) {\n"
                + "                out.setField(1, null);\n"
                + "            } else {\n"
                + "                out.setField(1, field$6);\n"
                + "            }\n"
                + "\n"
                + "\n"
                + "            joinedRow$7.replace(in1, out);\n"
                + "            joinedRow$7.setRowKind(in1.getRowKind());\n"
                + "            outputResult(joinedRow$7);\n"
                + "        }\n"
                + "\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public void close() throws Exception {\n"
                + "\n"
                + "    }\n"
                + "}";

        Class<TableFunctionCollector> c = JaninoUtils.genClass("BatchJoinTableFuncCollector$8", s, TableFunctionCollector.class);

        System.out.println(1);


        String s2 = "\n"
                + "      public class JoinTableFuncCollector$8 extends org.apache.flink.table.runtime.collector"
                + ".TableFunctionCollector {\n"
                + "\n"
                + "        org.apache.flink.table.data.GenericRowData out = new org.apache.flink.table.data"
                + ".GenericRowData(2);\n"
                + "org.apache.flink.table.data.utils.JoinedRowData joinedRow$7 = new org.apache.flink.table.data"
                + ".utils.JoinedRowData();\n"
                + "\n"
                + "        public JoinTableFuncCollector$8(Object[] references) throws Exception {\n"
                + "          \n"
                + "        }\n"
                + "\n"
                + "        @Override\n"
                + "        public void open(org.apache.flink.configuration.Configuration parameters) throws Exception"
                + " {\n"
                + "          \n"
                + "        }\n"
                + "\n"
                + "        @Override\n"
                + "        public void collect(Object record) throws Exception {\n"
                + "          org.apache.flink.table.data.RowData in1 = (org.apache.flink.table.data.RowData) getInput"
                + "();\n"
                + "          org.apache.flink.table.data.RowData in2 = (org.apache.flink.table.data.RowData) record;\n"
                + "          org.apache.flink.table.data.binary.BinaryStringData field$5;\n"
                + "boolean isNull$5;\n"
                + "long field$6;\n"
                + "boolean isNull$6;\n"
                + "          isNull$6 = in2.isNullAt(1);\n"
                + "field$6 = -1L;\n"
                + "if (!isNull$6) {\n"
                + "  field$6 = in2.getLong(1);\n"
                + "}\n"
                + "isNull$5 = in2.isNullAt(0);\n"
                + "field$5 = org.apache.flink.table.data.binary.BinaryStringData.EMPTY_UTF8;\n"
                + "if (!isNull$5) {\n"
                + "  field$5 = ((org.apache.flink.table.data.binary.BinaryStringData) in2.getString(0));\n"
                + "}\n"
                + "          \n"
                + "          \n"
                + "\n"
                + "\n"
                + "\n"
                + "\n"
                + "if (isNull$5) {\n"
                + "  out.setField(0, null);\n"
                + "} else {\n"
                + "  out.setField(0, field$5);\n"
                + "}\n"
                + "          \n"
                + "\n"
                + "\n"
                + "if (isNull$6) {\n"
                + "  out.setField(1, null);\n"
                + "} else {\n"
                + "  out.setField(1, field$6);\n"
                + "}\n"
                + "          \n"
                + "        \n"
                + "joinedRow$7.replace(in1, out);\n"
                + "joinedRow$7.setRowKind(in1.getRowKind());\n"
                + "outputResult(joinedRow$7);\n"
                + "      \n"
                + "        }\n"
                + "\n"
                + "        @Override\n"
                + "        public void close() throws Exception {\n"
                + "          \n"
                + "        }\n"
                + "      }\n"
                + "    ";

        Class<TableFunctionCollector> c1 = JaninoUtils.genClass("JoinTableFuncCollector$8", s2, TableFunctionCollector.class);

        System.out.println(1);

        String s3 = "/* 1 */\n"
                + "/* 2 */      import java.util.LinkedList;\n"
                + "/* 3 */      import java.util.List;\n"
                + "/* 4 */      public class LookupFunction$4\n"
                + "        /* 5 */          extends org.apache.flink.api.common.functions.RichFlatMapFunction {\n"
                + "    /* 6 */\n"
                + "    /* 7 */        private transient flink.examples.sql._03.source_sink.table.redis.v2.source"
                + ".RedisRowDataLookupFunction "
                +
                "function_flink$examples$sql$_03$source_sink$table$redis$v2$source$RedisRowDataLookupFunction$9a02959d27765bacc6e3b2107f2d01bc;\n"
                + "    /* 8 */        private TableFunctionResultConverterCollector$2 resultConverterCollector$3 = "
                + "null;\n"
                + "    /* 9 */\n"
                + "    /* 10 */        public LookupFunction$4(Object[] references) throws Exception {\n"
                + "        /* 11 */          "
                +
                "function_flink$examples$sql$_03$source_sink$table$redis$v2$source$RedisRowDataLookupFunction$9a02959d27765bacc6e3b2107f2d01bc = (((flink.examples.sql._03.source_sink.table.redis.v2.source.RedisRowDataLookupFunction) references[0]));\n"
                + "        /* 12 */        }\n"
                + "    /* 13 */\n"
                + "    /* 14 */\n"
                + "    /* 15 */\n"
                + "    /* 16 */        @Override\n"
                + "    /* 17 */        public void open(org.apache.flink.configuration.Configuration parameters) "
                + "throws Exception {\n"
                + "        /* 18 */\n"
                + "        /* 19 */          "
                +
                "function_flink$examples$sql$_03$source_sink$table$redis$v2$source$RedisRowDataLookupFunction$9a02959d27765bacc6e3b2107f2d01bc.open(new org.apache.flink.table.functions.FunctionContext(getRuntimeContext()));\n"
                + "        /* 20 */\n"
                + "        /* 21 */\n"
                + "        /* 22 */          resultConverterCollector$3 = new TableFunctionResultConverterCollector$2"
                + "();\n"
                + "        /* 23 */          resultConverterCollector$3.setRuntimeContext(getRuntimeContext());\n"
                + "        /* 24 */          resultConverterCollector$3.open(new org.apache.flink.configuration"
                + ".Configuration());\n"
                + "        /* 25 */\n"
                + "        /* 26 */\n"
                + "        /* 27 */          "
                +
                "function_flink$examples$sql$_03$source_sink$table$redis$v2$source$RedisRowDataLookupFunction$9a02959d27765bacc6e3b2107f2d01bc.setCollector(resultConverterCollector$3);\n"
                + "        /* 28 */\n"
                + "        /* 29 */        }\n"
                + "    /* 30 */\n"
                + "    /* 31 */        @Override\n"
                + "    /* 32 */        public void flatMap(Object _in1, org.apache.flink.util.Collector c) throws "
                + "Exception {\n"
                + "        /* 33 */          List<org.apache.flink.table.data.RowData> l = (List<org.apache.flink"
                + ".table.data.RowData>) _in1;\n"
                + "        /* 34 */          List<org.apache.flink.table.data.binary.BinaryStringData> list = new "
                + "LinkedList<org.apache.flink.table.data.RowData>();\n"
                + "        /* 35 */          for (int i = 0; i < l.size(); i++) {\n"
                + "            /* 36 */\n"
                + "            /* 37 */              org.apache.flink.table.data.RowData in1 = (org.apache.flink"
                + ".table.data.RowData) l.get(i);\n"
                + "            /* 38 */\n"
                + "            /* 39 */\n"
                + "            /* 40 */              org.apache.flink.table.data.binary.BinaryStringData field$0;\n"
                + "            /* 41 */              boolean isNull$0;\n"
                + "            /* 42 */\n"
                + "            /* 43 */              isNull$0 = in1.isNullAt(2);\n"
                + "            /* 44 */              field$0 = org.apache.flink.table.data.binary.BinaryStringData"
                + ".EMPTY_UTF8;\n"
                + "            /* 45 */              if (!isNull$0) {\n"
                + "                /* 46 */                field$0 = ((org.apache.flink.table.data.binary"
                + ".BinaryStringData) in1.getString(2));\n"
                + "                /* 47 */              }\n"
                + "            /* 48 */\n"
                + "            /* 49 */              list.add(field$0);\n"
                + "            /* 50 */          }\n"
                + "        /* 51 */\n"
                + "        /* 52 */\n"
                + "        /* 53 */          resultConverterCollector$3.setCollector(c);\n"
                + "        /* 54 */\n"
                + "        /* 55 */\n"
                + "        /* 56 */          "
                +
                "function_flink$examples$sql$_03$source_sink$table$redis$v2$source$RedisRowDataLookupFunction$9a02959d27765bacc6e3b2107f2d01bc.eval((List<org.apache.flink.table.data.binary.BinaryStringData>) list);\n"
                + "        /* 57 */\n"
                + "        /* 58 */\n"
                + "        /* 59 */        }\n"
                + "    /* 60 */\n"
                + "    /* 61 */        @Override\n"
                + "    /* 62 */        public void close() throws Exception {\n"
                + "        /* 63 */\n"
                + "        /* 64 */          "
                +
                "function_flink$examples$sql$_03$source_sink$table$redis$v2$source$RedisRowDataLookupFunction$9a02959d27765bacc6e3b2107f2d01bc.close();\n"
                + "        /* 65 */\n"
                + "        /* 66 */        }\n"
                + "    /* 67 */\n"
                + "    /* 68 */\n"
                + "    /* 69 */              public class TableFunctionResultConverterCollector$2 extends org.apache"
                + ".flink.table.runtime.collector.WrappingCollector {\n"
                + "        /* 70 */\n"
                + "        /* 71 */\n"
                + "        /* 72 */\n"
                + "        /* 73 */                public TableFunctionResultConverterCollector$2() throws Exception "
                + "{\n"
                + "            /* 74 */\n"
                + "            /* 75 */                }\n"
                + "        /* 76 */\n"
                + "        /* 77 */                @Override\n"
                + "        /* 78 */                public void open(org.apache.flink.configuration.Configuration "
                + "parameters) throws Exception {\n"
                + "            /* 79 */\n"
                + "            /* 80 */                }\n"
                + "        /* 81 */\n"
                + "        /* 82 */                @Override\n"
                + "        /* 83 */                public void collect(Object record) throws Exception {\n"
                + "            /* 84 */                  List<org.apache.flink.table.data.RowData> externalResult$1 ="
                + " (List<org.apache.flink.table.data.RowData>) record;\n"
                + "            /* 85 */\n"
                + "            /* 86 */\n"
                + "            /* 87 */\n"
                + "            /* 88 */\n"
                + "            /* 89 */                  if (externalResult$1 != null) {\n"
                + "                /* 90 */                    outputResult(externalResult$1);\n"
                + "                /* 91 */                  }\n"
                + "            /* 92 */\n"
                + "            /* 93 */                }\n"
                + "        /* 94 */\n"
                + "        /* 95 */                @Override\n"
                + "        /* 96 */                public void close() {\n"
                + "            /* 97 */                  try {\n"
                + "                /* 98 */\n"
                + "                /* 99 */                  } catch (Exception e) {\n"
                + "                /* 100 */                    throw new RuntimeException(e);\n"
                + "                /* 101 */                  }\n"
                + "            /* 102 */                }\n"
                + "        /* 103 */              }\n"
                + "    /* 104 */\n"
                + "    /* 105 */      }\n"
                + "/* 106 */    ";

        Class<RichFlatMapFunction> c3 = JaninoUtils.genClass("LookupFunction$4", s3, RichFlatMapFunction.class);

        System.out.println(1);
    }

}
